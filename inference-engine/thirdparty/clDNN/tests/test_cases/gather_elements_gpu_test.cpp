// Copyright (c) 2021 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///////////////////////////////////////////////////////////////////////////////////////////////////
#include <gtest/gtest.h>

#include <api/input_layout.hpp>
#include <api/memory.hpp>
#include <api/gather_elements.hpp>
#include <api/topology.hpp>
#include <api/network.hpp>

#include <cstddef>
#include <tests/test_utils/test_utils.h>

using namespace cldnn;
using namespace ::tests;

inline void DoTest(const engine& engine,
    const cldnn::memory& input0, // data
    const cldnn::memory& input1, // indices
    const std::vector<float>& expected_results,
    const tensor& output_tensor,
    const int axis) {
    topology topology;
    topology.add(input_layout("InputData", input0.get_layout()));
    topology.add(input_layout("InputIndices", input1.get_layout()));
    topology.add(
        gather_elements("gather_elements", "InputData", "InputIndices", input1.get_layout().format, output_tensor, axis)
    );

    network network(engine, topology);

    network.set_input_data("InputData", input0);
    network.set_input_data("InputIndices", input1);
    auto outputs = network.execute();
    auto output = outputs.at("gather_elements").get_memory();
    auto output_ptr = output.pointer<uint16_t>();

    for (size_t i = 0; i < expected_results.size(); ++i) {
        // printf("%ld : %f %f\n", i, expected_results[i], float16_to_float32(output_ptr[i]) );
        // printf("%ld : %f\n", i, float16_to_float32(output_ptr[i]) );
        EXPECT_EQ(expected_results[i], float16_to_float32(output_ptr[i]));
    }
}

// 4-1-1
TEST(gather_elements_gpu_fp16, d2235_i2237_a3) {
    const auto& engine = get_test_engine();

    const int axis = 3;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfyx, { 2, 2, 3, 5 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfyx, { 2, 2, 3, 7 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(5),
        FLOAT16(2), FLOAT16(0), FLOAT16(7), FLOAT16(7), FLOAT16(10),
        FLOAT16(4), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(0),

        FLOAT16(5), FLOAT16(7), FLOAT16(0), FLOAT16(4), FLOAT16(0), 
        FLOAT16(4), FLOAT16(7), FLOAT16(6), FLOAT16(10), FLOAT16(9),
        FLOAT16(5), FLOAT16(1), FLOAT16(7), FLOAT16(4), FLOAT16(7), 


        FLOAT16(10), FLOAT16(8), FLOAT16(2), FLOAT16(0), FLOAT16(8),
        FLOAT16(3), FLOAT16(6), FLOAT16(8), FLOAT16(10), FLOAT16(4),
        FLOAT16(2), FLOAT16(10), FLOAT16(7), FLOAT16(8), FLOAT16(7),
        
        FLOAT16(0), FLOAT16(6), FLOAT16(9), FLOAT16(2), FLOAT16(4),
        FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(3),
        FLOAT16(1), FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(0),
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(2), FLOAT16(4), FLOAT16(3), FLOAT16(4), FLOAT16(0), FLOAT16(0),
        FLOAT16(1), FLOAT16(4), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0),
        FLOAT16(1), FLOAT16(1), FLOAT16(3), FLOAT16(1), FLOAT16(4), FLOAT16(2), FLOAT16(4),

        FLOAT16(2), FLOAT16(1), FLOAT16(3), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(4),
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(3), FLOAT16(4), FLOAT16(2), FLOAT16(2),
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(3), FLOAT16(4),


        FLOAT16(3), FLOAT16(4), FLOAT16(4), FLOAT16(1), FLOAT16(0), FLOAT16(3), FLOAT16(2),
        FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(0), FLOAT16(4), FLOAT16(0),
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(4), FLOAT16(3), FLOAT16(0), FLOAT16(2),

        FLOAT16(2), FLOAT16(3), FLOAT16(4), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(3),
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(3), FLOAT16(3), FLOAT16(4), FLOAT16(2),
        FLOAT16(0), FLOAT16(0), FLOAT16(3), FLOAT16(3), FLOAT16(4), FLOAT16(3), FLOAT16(4),
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(0), FLOAT16(0),
        FLOAT16(0), FLOAT16(10), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2),
        FLOAT16(5), FLOAT16(5), FLOAT16(0), FLOAT16(5), FLOAT16(0), FLOAT16(9), FLOAT16(0),

        FLOAT16(0), FLOAT16(7), FLOAT16(4), FLOAT16(0), FLOAT16(7), FLOAT16(0), FLOAT16(0),
        FLOAT16(7), FLOAT16(4), FLOAT16(6), FLOAT16(10), FLOAT16(9), FLOAT16(6), FLOAT16(6),
        FLOAT16(7), FLOAT16(7), FLOAT16(5), FLOAT16(7), FLOAT16(5), FLOAT16(4), FLOAT16(7),


        FLOAT16(0), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(10), FLOAT16(0), FLOAT16(2),
        FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(3), FLOAT16(4), FLOAT16(3),
        FLOAT16(10), FLOAT16(2), FLOAT16(2), FLOAT16(7), FLOAT16(8), FLOAT16(2), FLOAT16(7),

        FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(9), FLOAT16(9), FLOAT16(0), FLOAT16(2),
        FLOAT16(5), FLOAT16(5), FLOAT16(8), FLOAT16(3), FLOAT16(3), FLOAT16(3), FLOAT16(2),
        FLOAT16(1), FLOAT16(1), FLOAT16(10), FLOAT16(10), FLOAT16(0), FLOAT16(10), FLOAT16(0),
    };

    DoTest(engine,input0, input1, expected_results, tensor(2, 2, 3, 7), axis);
}

// 4-1-2
TEST(gather_elements_gpu_fp16, d2235_i2237_an1) {
    const auto& engine = get_test_engine();

    const int axis = -1;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfyx, { 2, 2, 3, 5 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfyx, { 2, 2, 3, 7 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(5), 
        FLOAT16(2), FLOAT16(0), FLOAT16(7), FLOAT16(7), FLOAT16(10), 
        FLOAT16(4), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(0), 

        FLOAT16(5), FLOAT16(7), FLOAT16(0), FLOAT16(4), FLOAT16(0), 
        FLOAT16(4), FLOAT16(7), FLOAT16(6), FLOAT16(10), FLOAT16(9), 
        FLOAT16(5), FLOAT16(1), FLOAT16(7), FLOAT16(4), FLOAT16(7), 


        FLOAT16(10), FLOAT16(8), FLOAT16(2), FLOAT16(0), FLOAT16(8), 
        FLOAT16(3), FLOAT16(6), FLOAT16(8), FLOAT16(10), FLOAT16(4), 
        FLOAT16(2), FLOAT16(10), FLOAT16(7), FLOAT16(8), FLOAT16(7), 

        FLOAT16(0), FLOAT16(6), FLOAT16(9), FLOAT16(2), FLOAT16(4), 
        FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(3), 
        FLOAT16(1), FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(0), 
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(2), FLOAT16(4), FLOAT16(3), FLOAT16(4), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(4), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(3), FLOAT16(1), FLOAT16(4), FLOAT16(2), FLOAT16(4), 

        FLOAT16(2), FLOAT16(1), FLOAT16(3), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(4), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(3), FLOAT16(4), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(3), FLOAT16(4), 


        FLOAT16(3), FLOAT16(4), FLOAT16(4), FLOAT16(1), FLOAT16(0), FLOAT16(3), FLOAT16(2), 
        FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(0), FLOAT16(4), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(4), FLOAT16(3), FLOAT16(0), FLOAT16(2), 

        FLOAT16(2), FLOAT16(3), FLOAT16(4), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(3), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(3), FLOAT16(3), FLOAT16(4), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(3), FLOAT16(3), FLOAT16(4), FLOAT16(3), FLOAT16(4), 
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(10), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(5), FLOAT16(5), FLOAT16(0), FLOAT16(5), FLOAT16(0), FLOAT16(9), FLOAT16(0), 

        FLOAT16(0), FLOAT16(7), FLOAT16(4), FLOAT16(0), FLOAT16(7), FLOAT16(0), FLOAT16(0), 
        FLOAT16(7), FLOAT16(4), FLOAT16(6), FLOAT16(10), FLOAT16(9), FLOAT16(6), FLOAT16(6), 
        FLOAT16(7), FLOAT16(7), FLOAT16(5), FLOAT16(7), FLOAT16(5), FLOAT16(4), FLOAT16(7), 


        FLOAT16(0), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(10), FLOAT16(0), FLOAT16(2), 
        FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(3), FLOAT16(4), FLOAT16(3), 
        FLOAT16(10), FLOAT16(2), FLOAT16(2), FLOAT16(7), FLOAT16(8), FLOAT16(2), FLOAT16(7), 

        FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(9), FLOAT16(9), FLOAT16(0), FLOAT16(2), 
        FLOAT16(5), FLOAT16(5), FLOAT16(8), FLOAT16(3), FLOAT16(3), FLOAT16(3), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(10), FLOAT16(10), FLOAT16(0), FLOAT16(10), FLOAT16(0), 
    };

    DoTest(engine,input0, input1, expected_results, tensor(2, 2, 3, 7), axis);
}

// 4-2
TEST(gather_elements_gpu_fp16, d2329_i2329_a2) {
    const auto& engine = get_test_engine();

    const int axis = 2;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfyx, { 2, 3, 2, 9 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfyx, { 2, 3, 2, 9 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(7), FLOAT16(7), 
        FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(0), FLOAT16(5), FLOAT16(7), FLOAT16(0), 

        FLOAT16(4), FLOAT16(0), FLOAT16(4), FLOAT16(7), FLOAT16(6), FLOAT16(10), FLOAT16(9), FLOAT16(5), FLOAT16(1), 
        FLOAT16(7), FLOAT16(4), FLOAT16(7), FLOAT16(10), FLOAT16(8), FLOAT16(2), FLOAT16(0), FLOAT16(8), FLOAT16(3), 

        FLOAT16(6), FLOAT16(8), FLOAT16(10), FLOAT16(4), FLOAT16(2), FLOAT16(10), FLOAT16(7), FLOAT16(8), FLOAT16(7), 
        FLOAT16(0), FLOAT16(6), FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(3), 


        FLOAT16(3), FLOAT16(1), FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(0), FLOAT16(9), FLOAT16(5), FLOAT16(5), 
        FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(10), FLOAT16(0), FLOAT16(5), FLOAT16(4), 

        FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(0), FLOAT16(8), FLOAT16(8), FLOAT16(9), 
        FLOAT16(1), FLOAT16(0), FLOAT16(7), FLOAT16(9), FLOAT16(6), FLOAT16(8), FLOAT16(7), FLOAT16(10), FLOAT16(9), 

        FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(5), FLOAT16(6), FLOAT16(9), FLOAT16(4), FLOAT16(9), FLOAT16(2), 
        FLOAT16(4), FLOAT16(5), FLOAT16(5), FLOAT16(3), FLOAT16(1), FLOAT16(1), FLOAT16(6), FLOAT16(8), FLOAT16(0), 
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(1), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(7), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(7), FLOAT16(7), 
        FLOAT16(7), FLOAT16(4), FLOAT16(7), FLOAT16(7), FLOAT16(6), FLOAT16(2), FLOAT16(0), FLOAT16(5), FLOAT16(1), 
        FLOAT16(7), FLOAT16(0), FLOAT16(4), FLOAT16(10), FLOAT16(8), FLOAT16(2), FLOAT16(9), FLOAT16(5), FLOAT16(3), 
        FLOAT16(6), FLOAT16(8), FLOAT16(9), FLOAT16(4), FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(3), 
        FLOAT16(6), FLOAT16(8), FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(7), 
        FLOAT16(3), FLOAT16(1), FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(10), FLOAT16(0), FLOAT16(5), FLOAT16(4), 
        FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(5), FLOAT16(5), 
        FLOAT16(3), FLOAT16(0), FLOAT16(7), FLOAT16(9), FLOAT16(10), FLOAT16(0), FLOAT16(8), FLOAT16(10), FLOAT16(9), 
        FLOAT16(1), FLOAT16(0), FLOAT16(7), FLOAT16(5), FLOAT16(10), FLOAT16(0), FLOAT16(7), FLOAT16(8), FLOAT16(9), 
        FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(3), FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(9), FLOAT16(2), 
        FLOAT16(2), FLOAT16(5), FLOAT16(3), FLOAT16(5), FLOAT16(1), FLOAT16(1), FLOAT16(4), FLOAT16(8), FLOAT16(0), 
    };

    DoTest(engine,input0, input1, expected_results, tensor(2, 3, 2, 9), axis);
}

// 4-3
TEST(gather_elements_gpu_fp16, d3238_i2238_a0) {
    const auto& engine = get_test_engine();

    const int axis = 0;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfyx, { 3, 2, 3, 8 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfyx, { 2, 2, 3, 8 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(7), 
        FLOAT16(7), FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(0), FLOAT16(5), 
        FLOAT16(7), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(4), FLOAT16(7), FLOAT16(6), FLOAT16(10), 

        FLOAT16(9), FLOAT16(5), FLOAT16(1), FLOAT16(7), FLOAT16(4), FLOAT16(7), FLOAT16(10), FLOAT16(8), 
        FLOAT16(2), FLOAT16(0), FLOAT16(8), FLOAT16(3), FLOAT16(6), FLOAT16(8), FLOAT16(10), FLOAT16(4), 
        FLOAT16(2), FLOAT16(10), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(0), FLOAT16(6), FLOAT16(9), 


        FLOAT16(2), FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(1), 
        FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(0), FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(3), 
        FLOAT16(10), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(10), FLOAT16(0), FLOAT16(5), FLOAT16(4), 

        FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(0), FLOAT16(8), FLOAT16(8), 
        FLOAT16(9), FLOAT16(1), FLOAT16(0), FLOAT16(7), FLOAT16(9), FLOAT16(6), FLOAT16(8), FLOAT16(7), 
        FLOAT16(10), FLOAT16(9), FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(5), FLOAT16(6), FLOAT16(9), 


        FLOAT16(4), FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(5), FLOAT16(5), FLOAT16(3), FLOAT16(1), 
        FLOAT16(1), FLOAT16(6), FLOAT16(8), FLOAT16(0), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(8), 
        FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(9), FLOAT16(1), FLOAT16(2), FLOAT16(7), FLOAT16(1), 

        FLOAT16(1), FLOAT16(3), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(7), FLOAT16(10), FLOAT16(2), 
        FLOAT16(1), FLOAT16(3), FLOAT16(9), FLOAT16(7), FLOAT16(1), FLOAT16(7), FLOAT16(4), FLOAT16(4), 
        FLOAT16(5), FLOAT16(1), FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(10), FLOAT16(6), FLOAT16(1), 
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), 

        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), 


        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), 

        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(4), FLOAT16(2), FLOAT16(4), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(7), 
        FLOAT16(1), FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(5), FLOAT16(3), 
        FLOAT16(6), FLOAT16(5), FLOAT16(6), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(6), FLOAT16(1), 
        FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(4), FLOAT16(4), FLOAT16(7), FLOAT16(8), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(7), FLOAT16(9), FLOAT16(8), FLOAT16(4), FLOAT16(4), 
        FLOAT16(5), FLOAT16(1), FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(0), FLOAT16(6), FLOAT16(1), 
        FLOAT16(2), FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(7), 
        FLOAT16(7), FLOAT16(10), FLOAT16(4), FLOAT16(0), FLOAT16(5), FLOAT16(0), FLOAT16(5), FLOAT16(3), 
        FLOAT16(6), FLOAT16(9), FLOAT16(2), FLOAT16(0), FLOAT16(4), FLOAT16(2), FLOAT16(6), FLOAT16(10), 
        FLOAT16(9), FLOAT16(3), FLOAT16(0), FLOAT16(4), FLOAT16(10), FLOAT16(7), FLOAT16(10), FLOAT16(2), 
        FLOAT16(9), FLOAT16(3), FLOAT16(0), FLOAT16(7), FLOAT16(6), FLOAT16(8), FLOAT16(8), FLOAT16(4), 
        FLOAT16(2), FLOAT16(10), FLOAT16(7), FLOAT16(3), FLOAT16(3), FLOAT16(10), FLOAT16(6), FLOAT16(1), 
    };

    DoTest(engine,input0, input1, expected_results, tensor(2, 2, 3, 8), axis);
}

// 5-1
TEST(gather_elements_gpu_fp16, d32223_i32228_a4) {
    const auto& engine = get_test_engine();

    const int axis = 4;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfzyx, { 3, 2, 2, 2, 3 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfzyx, { 3, 2, 2, 2, 8 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), 
        FLOAT16(5), FLOAT16(5), FLOAT16(2), 

        FLOAT16(0), FLOAT16(7), FLOAT16(7), 
        FLOAT16(10), FLOAT16(4), FLOAT16(5), 

        FLOAT16(9), FLOAT16(0), FLOAT16(0), 
        FLOAT16(5), FLOAT16(7), FLOAT16(0), 

        FLOAT16(4), FLOAT16(0), FLOAT16(4), 
        FLOAT16(7), FLOAT16(6), FLOAT16(10), 

        FLOAT16(9), FLOAT16(5), FLOAT16(1), 
        FLOAT16(7), FLOAT16(4), FLOAT16(7), 
        FLOAT16(10), FLOAT16(8), FLOAT16(2), 
        FLOAT16(0), FLOAT16(8), FLOAT16(3), 
        FLOAT16(6), FLOAT16(8), FLOAT16(10), 
        FLOAT16(4), FLOAT16(2), FLOAT16(10), 
        FLOAT16(7), FLOAT16(8), FLOAT16(7), 
        FLOAT16(0), FLOAT16(6), FLOAT16(9), 

        FLOAT16(2), FLOAT16(4), FLOAT16(8), 
        FLOAT16(5), FLOAT16(2), FLOAT16(3), 
        FLOAT16(3), FLOAT16(1), FLOAT16(5), 
        FLOAT16(9), FLOAT16(10), FLOAT16(0), 
        FLOAT16(9), FLOAT16(5), FLOAT16(5), 
        FLOAT16(3), FLOAT16(10), FLOAT16(5), 
        FLOAT16(2), FLOAT16(0), FLOAT16(10), 
        FLOAT16(0), FLOAT16(5), FLOAT16(4),
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), 
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), 
        FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(0), FLOAT16(7), 
        FLOAT16(4), FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(10), FLOAT16(10), FLOAT16(4), FLOAT16(5), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(9), FLOAT16(0), FLOAT16(9), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(5), FLOAT16(5), FLOAT16(0), 
        FLOAT16(0), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), 
        FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(10), FLOAT16(10), FLOAT16(7), FLOAT16(6), FLOAT16(6), 
        FLOAT16(1), FLOAT16(1), FLOAT16(5), FLOAT16(5), FLOAT16(9), FLOAT16(1), FLOAT16(9), FLOAT16(9), 
        FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(4), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(8), FLOAT16(2), FLOAT16(8), FLOAT16(2), FLOAT16(10), FLOAT16(10), FLOAT16(8), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(8), FLOAT16(8), FLOAT16(3), FLOAT16(0), FLOAT16(0), 
        FLOAT16(10), FLOAT16(6), FLOAT16(6), FLOAT16(6), FLOAT16(8), FLOAT16(6), FLOAT16(6), FLOAT16(10), 
        FLOAT16(10), FLOAT16(4), FLOAT16(10), FLOAT16(4), FLOAT16(4), FLOAT16(2), FLOAT16(2), FLOAT16(4), 
        FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(7), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(7), 
        FLOAT16(0), FLOAT16(0), FLOAT16(6), FLOAT16(6), FLOAT16(9), FLOAT16(9), FLOAT16(6), FLOAT16(6), 
        FLOAT16(4), FLOAT16(2), FLOAT16(8), FLOAT16(4), FLOAT16(2), FLOAT16(4), FLOAT16(2), FLOAT16(4), 
        FLOAT16(3), FLOAT16(3), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(2), FLOAT16(5), 
        FLOAT16(1), FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(3), 
        FLOAT16(10), FLOAT16(0), FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(0), FLOAT16(10), FLOAT16(0), 
        FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), 
        FLOAT16(5), FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(5), FLOAT16(5), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(10), FLOAT16(10), 
        FLOAT16(0), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(4), FLOAT16(5), FLOAT16(5), FLOAT16(4), 
    };

    DoTest(engine,input0, input1, expected_results, tensor(3, 2, 2, 2, 8), axis);
}

// 5-2
TEST(gather_elements_gpu_fp16, d23327_i23327_a3) {
    const auto& engine = get_test_engine();

    const int axis = 3;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfzyx, { 2, 3, 3, 2, 7 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfzyx, { 2, 3, 3, 2, 7 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(2), FLOAT16(0), 
        FLOAT16(7), FLOAT16(7), FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(9), FLOAT16(0), 
        FLOAT16(0), FLOAT16(5), FLOAT16(7), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(4), 
        FLOAT16(7), FLOAT16(6), FLOAT16(10), FLOAT16(9), FLOAT16(5), FLOAT16(1), FLOAT16(7), 
        FLOAT16(4), FLOAT16(7), FLOAT16(10), FLOAT16(8), FLOAT16(2), FLOAT16(0), FLOAT16(8), 
        FLOAT16(3), FLOAT16(6), FLOAT16(8), FLOAT16(10), FLOAT16(4), FLOAT16(2), FLOAT16(10), 
        FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(0), FLOAT16(6), FLOAT16(9), FLOAT16(2), 
        FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(1), 
        FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(0), FLOAT16(9), FLOAT16(5), FLOAT16(5), 
        FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(10), FLOAT16(0), 
        FLOAT16(5), FLOAT16(4), FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(5), FLOAT16(10), 
        FLOAT16(0), FLOAT16(8), FLOAT16(8), FLOAT16(9), FLOAT16(1), FLOAT16(0), FLOAT16(7), 
        FLOAT16(9), FLOAT16(6), FLOAT16(8), FLOAT16(7), FLOAT16(10), FLOAT16(9), FLOAT16(2), 
        FLOAT16(3), FLOAT16(3), FLOAT16(5), FLOAT16(6), FLOAT16(9), FLOAT16(4), FLOAT16(9), 
        FLOAT16(2), FLOAT16(4), FLOAT16(5), FLOAT16(5), FLOAT16(3), FLOAT16(1), FLOAT16(1), 
        FLOAT16(6), FLOAT16(8), FLOAT16(0), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(8), 
        FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(9), FLOAT16(1), FLOAT16(2), FLOAT16(7), 
        FLOAT16(1), FLOAT16(1), FLOAT16(3), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(7), 
        FLOAT16(10), FLOAT16(2), FLOAT16(1), FLOAT16(3), FLOAT16(9), FLOAT16(7), FLOAT16(1), 
        FLOAT16(7), FLOAT16(4), FLOAT16(4), FLOAT16(5), FLOAT16(1), FLOAT16(6), FLOAT16(9), 
        FLOAT16(6), FLOAT16(10), FLOAT16(6), FLOAT16(1), FLOAT16(10), FLOAT16(4), FLOAT16(1), 
        FLOAT16(6), FLOAT16(2), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(1), FLOAT16(2), 
        FLOAT16(3), FLOAT16(6), FLOAT16(1), FLOAT16(7), FLOAT16(6), FLOAT16(8), FLOAT16(2), 
        FLOAT16(5), FLOAT16(4), FLOAT16(2), FLOAT16(0), FLOAT16(9), FLOAT16(4), FLOAT16(1), 
        FLOAT16(10), FLOAT16(4), FLOAT16(1), FLOAT16(9), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(4), FLOAT16(2), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(3), FLOAT16(4), 
        FLOAT16(8), FLOAT16(10), FLOAT16(7), FLOAT16(2), FLOAT16(7), FLOAT16(9), FLOAT16(2), 
        FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(6), FLOAT16(8), FLOAT16(8), FLOAT16(5), 
        FLOAT16(10), FLOAT16(6), FLOAT16(4), FLOAT16(9), FLOAT16(7), FLOAT16(7), FLOAT16(10), 
        FLOAT16(10), FLOAT16(9), FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(1), FLOAT16(4), 
        FLOAT16(6), FLOAT16(9), FLOAT16(4), FLOAT16(8), FLOAT16(9), FLOAT16(7), FLOAT16(8), 
        FLOAT16(7), FLOAT16(8), FLOAT16(0), FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(0), 
        FLOAT16(7), FLOAT16(5), FLOAT16(7), FLOAT16(7), FLOAT16(2), FLOAT16(10), FLOAT16(9), 
        FLOAT16(9), FLOAT16(5), FLOAT16(1), FLOAT16(4), FLOAT16(10), FLOAT16(2), FLOAT16(4), 
        FLOAT16(3), FLOAT16(5), FLOAT16(9), FLOAT16(4), FLOAT16(5), FLOAT16(8), FLOAT16(4), 
        FLOAT16(2), FLOAT16(10), FLOAT16(1), FLOAT16(6), FLOAT16(6), FLOAT16(0), FLOAT16(0), 
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(1), FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(7), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(5), FLOAT16(10), FLOAT16(0), FLOAT16(5), FLOAT16(1), FLOAT16(7), 
        FLOAT16(0), FLOAT16(5), FLOAT16(10), FLOAT16(9), FLOAT16(4), FLOAT16(0), FLOAT16(7), 
        FLOAT16(4), FLOAT16(7), FLOAT16(8), FLOAT16(10), FLOAT16(4), FLOAT16(0), FLOAT16(8), 
        FLOAT16(3), FLOAT16(7), FLOAT16(10), FLOAT16(10), FLOAT16(2), FLOAT16(2), FLOAT16(10), 
        FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(0), FLOAT16(6), FLOAT16(3), FLOAT16(1), 
        FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(6), FLOAT16(3), FLOAT16(2), 
        FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(2), FLOAT16(0), FLOAT16(5), FLOAT16(0), 
        FLOAT16(5), FLOAT16(10), FLOAT16(5), FLOAT16(0), FLOAT16(0), FLOAT16(5), FLOAT16(0), 
        FLOAT16(5), FLOAT16(4), FLOAT16(3), FLOAT16(9), FLOAT16(1), FLOAT16(0), FLOAT16(10), 
        FLOAT16(5), FLOAT16(4), FLOAT16(8), FLOAT16(9), FLOAT16(1), FLOAT16(0), FLOAT16(7), 
        FLOAT16(9), FLOAT16(6), FLOAT16(8), FLOAT16(6), FLOAT16(10), FLOAT16(9), FLOAT16(2), 
        FLOAT16(9), FLOAT16(6), FLOAT16(5), FLOAT16(7), FLOAT16(10), FLOAT16(4), FLOAT16(2), 
        FLOAT16(2), FLOAT16(4), FLOAT16(0), FLOAT16(5), FLOAT16(3), FLOAT16(10), FLOAT16(8), 
        FLOAT16(2), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(3), FLOAT16(10), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(3), FLOAT16(9), FLOAT16(4), FLOAT16(0), FLOAT16(7), 
        FLOAT16(1), FLOAT16(9), FLOAT16(6), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(7), 
        FLOAT16(10), FLOAT16(2), FLOAT16(4), FLOAT16(3), FLOAT16(1), FLOAT16(6), FLOAT16(1), 
        FLOAT16(7), FLOAT16(2), FLOAT16(4), FLOAT16(5), FLOAT16(1), FLOAT16(7), FLOAT16(9), 
        FLOAT16(6), FLOAT16(2), FLOAT16(5), FLOAT16(1), FLOAT16(10), FLOAT16(4), FLOAT16(2), 
        FLOAT16(6), FLOAT16(10), FLOAT16(6), FLOAT16(5), FLOAT16(10), FLOAT16(1), FLOAT16(2), 
        FLOAT16(3), FLOAT16(6), FLOAT16(2), FLOAT16(0), FLOAT16(9), FLOAT16(4), FLOAT16(2), 
        FLOAT16(5), FLOAT16(4), FLOAT16(2), FLOAT16(0), FLOAT16(9), FLOAT16(8), FLOAT16(2), 
        FLOAT16(4), FLOAT16(4), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(1), FLOAT16(4), 
        FLOAT16(4), FLOAT16(4), FLOAT16(1), FLOAT16(9), FLOAT16(5), FLOAT16(1), FLOAT16(0), 
        FLOAT16(9), FLOAT16(5), FLOAT16(7), FLOAT16(2), FLOAT16(7), FLOAT16(8), FLOAT16(5), 
        FLOAT16(8), FLOAT16(10), FLOAT16(7), FLOAT16(6), FLOAT16(8), FLOAT16(8), FLOAT16(5), 
        FLOAT16(10), FLOAT16(6), FLOAT16(3), FLOAT16(5), FLOAT16(7), FLOAT16(7), FLOAT16(4), 
        FLOAT16(10), FLOAT16(6), FLOAT16(3), FLOAT16(5), FLOAT16(7), FLOAT16(7), FLOAT16(4), 
        FLOAT16(7), FLOAT16(8), FLOAT16(4), FLOAT16(8), FLOAT16(9), FLOAT16(5), FLOAT16(0), 
        FLOAT16(7), FLOAT16(8), FLOAT16(0), FLOAT16(8), FLOAT16(9), FLOAT16(7), FLOAT16(8), 
        FLOAT16(9), FLOAT16(5), FLOAT16(7), FLOAT16(4), FLOAT16(2), FLOAT16(10), FLOAT16(9), 
        FLOAT16(9), FLOAT16(5), FLOAT16(1), FLOAT16(7), FLOAT16(10), FLOAT16(10), FLOAT16(4), 
        FLOAT16(2), FLOAT16(5), FLOAT16(9), FLOAT16(4), FLOAT16(5), FLOAT16(8), FLOAT16(4), 
        FLOAT16(3), FLOAT16(10), FLOAT16(9), FLOAT16(4), FLOAT16(6), FLOAT16(8), FLOAT16(0), 
    };

    DoTest(engine,input0, input1, expected_results, tensor(2, 3, 3, 2, 7), axis);
}

// 6-1
TEST(gather_elements_gpu_fp16, d232328_i232328_a3) {
    const auto& engine = get_test_engine();

    const int axis = 3;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfwzyx, { 2, 3, 2, 3, 2, 8 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfwzyx, { 2, 3, 2, 3, 2, 8 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(7), 
        FLOAT16(7), FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(9), FLOAT16(0), FLOAT16(0), FLOAT16(5), 
        FLOAT16(7), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(4), FLOAT16(7), FLOAT16(6), FLOAT16(10), 
        FLOAT16(9), FLOAT16(5), FLOAT16(1), FLOAT16(7), FLOAT16(4), FLOAT16(7), FLOAT16(10), FLOAT16(8), 
        FLOAT16(2), FLOAT16(0), FLOAT16(8), FLOAT16(3), FLOAT16(6), FLOAT16(8), FLOAT16(10), FLOAT16(4), 
        FLOAT16(2), FLOAT16(10), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(0), FLOAT16(6), FLOAT16(9), 
        FLOAT16(2), FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(1), 
        FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(0), FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(3), 
        FLOAT16(10), FLOAT16(5), FLOAT16(2), FLOAT16(0), FLOAT16(10), FLOAT16(0), FLOAT16(5), FLOAT16(4), 
        FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(0), FLOAT16(8), FLOAT16(8), 
        FLOAT16(9), FLOAT16(1), FLOAT16(0), FLOAT16(7), FLOAT16(9), FLOAT16(6), FLOAT16(8), FLOAT16(7), 
        FLOAT16(10), FLOAT16(9), FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(5), FLOAT16(6), FLOAT16(9), 
        FLOAT16(4), FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(5), FLOAT16(5), FLOAT16(3), FLOAT16(1), 
        FLOAT16(1), FLOAT16(6), FLOAT16(8), FLOAT16(0), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(8), 
        FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(9), FLOAT16(1), FLOAT16(2), FLOAT16(7), FLOAT16(1), 
        FLOAT16(1), FLOAT16(3), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(7), FLOAT16(10), FLOAT16(2), 
        FLOAT16(1), FLOAT16(3), FLOAT16(9), FLOAT16(7), FLOAT16(1), FLOAT16(7), FLOAT16(4), FLOAT16(4), 
        FLOAT16(5), FLOAT16(1), FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(10), FLOAT16(6), FLOAT16(1), 
        FLOAT16(10), FLOAT16(4), FLOAT16(1), FLOAT16(6), FLOAT16(2), FLOAT16(5), FLOAT16(5), FLOAT16(10), 
        FLOAT16(1), FLOAT16(2), FLOAT16(3), FLOAT16(6), FLOAT16(1), FLOAT16(7), FLOAT16(6), FLOAT16(8), 
        FLOAT16(2), FLOAT16(5), FLOAT16(4), FLOAT16(2), FLOAT16(0), FLOAT16(9), FLOAT16(4), FLOAT16(1), 
        FLOAT16(10), FLOAT16(4), FLOAT16(1), FLOAT16(9), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(4), 
        FLOAT16(2), FLOAT16(1), FLOAT16(8), FLOAT16(5), FLOAT16(3), FLOAT16(4), FLOAT16(8), FLOAT16(10), 
        FLOAT16(7), FLOAT16(2), FLOAT16(7), FLOAT16(9), FLOAT16(2), FLOAT16(9), FLOAT16(5), FLOAT16(5), 
        FLOAT16(6), FLOAT16(8), FLOAT16(8), FLOAT16(5), FLOAT16(10), FLOAT16(6), FLOAT16(4), FLOAT16(9), 
        FLOAT16(7), FLOAT16(7), FLOAT16(10), FLOAT16(10), FLOAT16(9), FLOAT16(3), FLOAT16(5), FLOAT16(5), 
        FLOAT16(1), FLOAT16(4), FLOAT16(6), FLOAT16(9), FLOAT16(4), FLOAT16(8), FLOAT16(9), FLOAT16(7), 
        FLOAT16(8), FLOAT16(7), FLOAT16(8), FLOAT16(0), FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(0), 
        FLOAT16(7), FLOAT16(5), FLOAT16(7), FLOAT16(7), FLOAT16(2), FLOAT16(10), FLOAT16(9), FLOAT16(9), 
        FLOAT16(5), FLOAT16(1), FLOAT16(4), FLOAT16(10), FLOAT16(2), FLOAT16(4), FLOAT16(3), FLOAT16(5), 
        FLOAT16(9), FLOAT16(4), FLOAT16(5), FLOAT16(8), FLOAT16(4), FLOAT16(2), FLOAT16(10), FLOAT16(1), 
        FLOAT16(6), FLOAT16(6), FLOAT16(0), FLOAT16(0), FLOAT16(8), FLOAT16(8), FLOAT16(3), FLOAT16(4), 
        FLOAT16(7), FLOAT16(7), FLOAT16(2), FLOAT16(9), FLOAT16(7), FLOAT16(9), FLOAT16(1), FLOAT16(0), 
        FLOAT16(8), FLOAT16(6), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(4), FLOAT16(10), FLOAT16(10), 
        FLOAT16(4), FLOAT16(2), FLOAT16(7), FLOAT16(3), FLOAT16(8), FLOAT16(8), FLOAT16(4), FLOAT16(3), 
        FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(10), FLOAT16(2), FLOAT16(9), FLOAT16(1), FLOAT16(4), 
        FLOAT16(6), FLOAT16(1), FLOAT16(9), FLOAT16(1), FLOAT16(10), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(2), FLOAT16(6), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(6), 
        FLOAT16(0), FLOAT16(6), FLOAT16(2), FLOAT16(3), FLOAT16(7), FLOAT16(1), FLOAT16(8), FLOAT16(5), 
        FLOAT16(6), FLOAT16(6), FLOAT16(3), FLOAT16(7), FLOAT16(1), FLOAT16(1), FLOAT16(5), FLOAT16(9), 
        FLOAT16(8), FLOAT16(6), FLOAT16(8), FLOAT16(3), FLOAT16(1), FLOAT16(5), FLOAT16(3), FLOAT16(6), 
        FLOAT16(5), FLOAT16(4), FLOAT16(2), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(5), FLOAT16(4), 
        FLOAT16(3), FLOAT16(0), FLOAT16(4), FLOAT16(2), FLOAT16(7), FLOAT16(7), FLOAT16(5), FLOAT16(8), 
        FLOAT16(7), FLOAT16(10), FLOAT16(5), FLOAT16(10), FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(7), 
        FLOAT16(4), FLOAT16(6), FLOAT16(10), FLOAT16(1), FLOAT16(7), FLOAT16(3), FLOAT16(5), FLOAT16(5), 
        FLOAT16(9), FLOAT16(0), FLOAT16(3), FLOAT16(7), FLOAT16(6), FLOAT16(10), FLOAT16(2), FLOAT16(10), 
        FLOAT16(2), FLOAT16(9), FLOAT16(7), FLOAT16(5), FLOAT16(8), FLOAT16(0), FLOAT16(1), FLOAT16(7), 
        FLOAT16(7), FLOAT16(4), FLOAT16(6), FLOAT16(8), FLOAT16(10), FLOAT16(7), FLOAT16(3), FLOAT16(8), 
        FLOAT16(1), FLOAT16(0), FLOAT16(5), FLOAT16(0), FLOAT16(1), FLOAT16(9), FLOAT16(8), FLOAT16(8), 
        FLOAT16(4), FLOAT16(0), FLOAT16(6), FLOAT16(5), FLOAT16(0), FLOAT16(5), FLOAT16(4), FLOAT16(2), 
        FLOAT16(4), FLOAT16(6), FLOAT16(7), FLOAT16(7), FLOAT16(5), FLOAT16(3), FLOAT16(8), FLOAT16(4), 
        FLOAT16(7), FLOAT16(3), FLOAT16(0), FLOAT16(1), FLOAT16(5), FLOAT16(8), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(7), FLOAT16(3), FLOAT16(0), FLOAT16(5), FLOAT16(5), FLOAT16(5), 
        FLOAT16(4), FLOAT16(1), FLOAT16(3), FLOAT16(9), FLOAT16(7), FLOAT16(6), FLOAT16(7), FLOAT16(3), 
        FLOAT16(0), FLOAT16(10), FLOAT16(5), FLOAT16(0), FLOAT16(9), FLOAT16(0), FLOAT16(4), FLOAT16(5), 
        FLOAT16(6), FLOAT16(8), FLOAT16(7), FLOAT16(5), FLOAT16(0), FLOAT16(1), FLOAT16(10), FLOAT16(2), 
        FLOAT16(3), FLOAT16(6), FLOAT16(6), FLOAT16(1), FLOAT16(6), FLOAT16(10), FLOAT16(3), FLOAT16(9), 
        FLOAT16(10), FLOAT16(2), FLOAT16(2), FLOAT16(4), FLOAT16(8), FLOAT16(9), FLOAT16(2), FLOAT16(8), 
        FLOAT16(7), FLOAT16(4), FLOAT16(2), FLOAT16(7), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(6), 
        FLOAT16(0), FLOAT16(1), FLOAT16(6), FLOAT16(4), FLOAT16(0), FLOAT16(7), FLOAT16(4), FLOAT16(9), 
        FLOAT16(1), FLOAT16(10), FLOAT16(0), FLOAT16(0), FLOAT16(5), FLOAT16(8), FLOAT16(10), FLOAT16(2), 
        FLOAT16(3), FLOAT16(8), FLOAT16(5), FLOAT16(8), FLOAT16(7), FLOAT16(7), FLOAT16(8), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(6), FLOAT16(7), FLOAT16(6), FLOAT16(4), FLOAT16(2), FLOAT16(2), 
        FLOAT16(7), FLOAT16(1), FLOAT16(8), FLOAT16(1), FLOAT16(0), FLOAT16(7), FLOAT16(1), FLOAT16(10), 
        FLOAT16(5), FLOAT16(6), FLOAT16(10), FLOAT16(0), FLOAT16(6), FLOAT16(7), FLOAT16(5), FLOAT16(0), 
        FLOAT16(4), FLOAT16(5), FLOAT16(8), FLOAT16(0), FLOAT16(4), FLOAT16(10), FLOAT16(5), FLOAT16(3), 
        FLOAT16(4), FLOAT16(8), FLOAT16(2), FLOAT16(1), FLOAT16(4), FLOAT16(10), FLOAT16(10), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(5), FLOAT16(1), FLOAT16(5), FLOAT16(1), FLOAT16(9), FLOAT16(4), 
        FLOAT16(4), FLOAT16(3), FLOAT16(7), FLOAT16(6), FLOAT16(9), FLOAT16(8), FLOAT16(9), FLOAT16(7), 
        FLOAT16(4), FLOAT16(10), FLOAT16(6), FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(4), FLOAT16(2), 
        FLOAT16(0), FLOAT16(4), FLOAT16(5), FLOAT16(3), FLOAT16(1), FLOAT16(2), FLOAT16(8), FLOAT16(5), 
        FLOAT16(7), FLOAT16(9), FLOAT16(2), FLOAT16(7), FLOAT16(2), FLOAT16(4), FLOAT16(0), FLOAT16(5), 
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(0), FLOAT16(8), FLOAT16(3), FLOAT16(6), FLOAT16(2), FLOAT16(0), FLOAT16(7), 
        FLOAT16(2), FLOAT16(10), FLOAT16(4), FLOAT16(5), FLOAT16(4), FLOAT16(0), FLOAT16(10), FLOAT16(8), 
        FLOAT16(2), FLOAT16(0), FLOAT16(8), FLOAT16(0), FLOAT16(6), FLOAT16(7), FLOAT16(0), FLOAT16(4), 
        FLOAT16(9), FLOAT16(10), FLOAT16(1), FLOAT16(8), FLOAT16(9), FLOAT16(0), FLOAT16(10), FLOAT16(9), 
        FLOAT16(2), FLOAT16(0), FLOAT16(4), FLOAT16(0), FLOAT16(4), FLOAT16(2), FLOAT16(10), FLOAT16(7), 
        FLOAT16(2), FLOAT16(10), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(0), FLOAT16(0), FLOAT16(9), 
        FLOAT16(10), FLOAT16(1), FLOAT16(0), FLOAT16(7), FLOAT16(9), FLOAT16(3), FLOAT16(8), FLOAT16(1), 
        FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(3), FLOAT16(3), FLOAT16(5), FLOAT16(8), FLOAT16(8), 
        FLOAT16(9), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(6), FLOAT16(3), FLOAT16(1), 
        FLOAT16(5), FLOAT16(9), FLOAT16(2), FLOAT16(3), FLOAT16(10), FLOAT16(5), FLOAT16(5), FLOAT16(9), 
        FLOAT16(10), FLOAT16(1), FLOAT16(2), FLOAT16(7), FLOAT16(2), FLOAT16(3), FLOAT16(5), FLOAT16(7), 
        FLOAT16(5), FLOAT16(9), FLOAT16(10), FLOAT16(5), FLOAT16(10), FLOAT16(5), FLOAT16(5), FLOAT16(3), 
        FLOAT16(1), FLOAT16(9), FLOAT16(2), FLOAT16(4), FLOAT16(1), FLOAT16(5), FLOAT16(3), FLOAT16(4), 
        FLOAT16(5), FLOAT16(6), FLOAT16(6), FLOAT16(0), FLOAT16(5), FLOAT16(7), FLOAT16(10), FLOAT16(8), 
        FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(4), FLOAT16(1), FLOAT16(2), FLOAT16(3), FLOAT16(4), 
        FLOAT16(1), FLOAT16(6), FLOAT16(0), FLOAT16(4), FLOAT16(6), FLOAT16(10), FLOAT16(10), FLOAT16(2), 
        FLOAT16(6), FLOAT16(9), FLOAT16(9), FLOAT16(9), FLOAT16(5), FLOAT16(2), FLOAT16(3), FLOAT16(1), 
        FLOAT16(5), FLOAT16(1), FLOAT16(8), FLOAT16(4), FLOAT16(6), FLOAT16(10), FLOAT16(10), FLOAT16(8), 
        FLOAT16(2), FLOAT16(4), FLOAT16(8), FLOAT16(5), FLOAT16(0), FLOAT16(9), FLOAT16(4), FLOAT16(10), 
        FLOAT16(10), FLOAT16(2), FLOAT16(1), FLOAT16(9), FLOAT16(1), FLOAT16(9), FLOAT16(0), FLOAT16(5), 
        FLOAT16(10), FLOAT16(1), FLOAT16(8), FLOAT16(2), FLOAT16(0), FLOAT16(4), FLOAT16(4), FLOAT16(1), 
        FLOAT16(7), FLOAT16(2), FLOAT16(1), FLOAT16(9), FLOAT16(2), FLOAT16(1), FLOAT16(5), FLOAT16(5), 
        FLOAT16(10), FLOAT16(5), FLOAT16(4), FLOAT16(2), FLOAT16(2), FLOAT16(5), FLOAT16(8), FLOAT16(10), 
        FLOAT16(1), FLOAT16(4), FLOAT16(1), FLOAT16(9), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(8), 
        FLOAT16(7), FLOAT16(5), FLOAT16(7), FLOAT16(9), FLOAT16(10), FLOAT16(6), FLOAT16(9), FLOAT16(7), 
        FLOAT16(7), FLOAT16(7), FLOAT16(8), FLOAT16(0), FLOAT16(9), FLOAT16(4), FLOAT16(3), FLOAT16(0), 
        FLOAT16(1), FLOAT16(5), FLOAT16(7), FLOAT16(9), FLOAT16(4), FLOAT16(6), FLOAT16(4), FLOAT16(9), 
        FLOAT16(5), FLOAT16(1), FLOAT16(8), FLOAT16(10), FLOAT16(9), FLOAT16(3), FLOAT16(5), FLOAT16(5), 
        FLOAT16(7), FLOAT16(5), FLOAT16(8), FLOAT16(7), FLOAT16(4), FLOAT16(6), FLOAT16(4), FLOAT16(9), 
        FLOAT16(8), FLOAT16(1), FLOAT16(10), FLOAT16(10), FLOAT16(9), FLOAT16(4), FLOAT16(5), FLOAT16(5), 
        FLOAT16(9), FLOAT16(4), FLOAT16(2), FLOAT16(8), FLOAT16(4), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(6), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(8), FLOAT16(4), FLOAT16(1), FLOAT16(4), 
        FLOAT16(9), FLOAT16(4), FLOAT16(5), FLOAT16(8), FLOAT16(4), FLOAT16(9), FLOAT16(1), FLOAT16(3), 
        FLOAT16(8), FLOAT16(6), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(9), FLOAT16(3), FLOAT16(4), 
        FLOAT16(4), FLOAT16(2), FLOAT16(2), FLOAT16(9), FLOAT16(7), FLOAT16(8), FLOAT16(4), FLOAT16(3), 
        FLOAT16(8), FLOAT16(6), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(8), FLOAT16(3), FLOAT16(4), 
        FLOAT16(8), FLOAT16(1), FLOAT16(8), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(8), FLOAT16(6), 
        FLOAT16(2), FLOAT16(6), FLOAT16(3), FLOAT16(8), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(4), 
        FLOAT16(0), FLOAT16(6), FLOAT16(9), FLOAT16(1), FLOAT16(10), FLOAT16(2), FLOAT16(2), FLOAT16(6), 
        FLOAT16(2), FLOAT16(6), FLOAT16(2), FLOAT16(7), FLOAT16(1), FLOAT16(4), FLOAT16(7), FLOAT16(4), 
        FLOAT16(8), FLOAT16(1), FLOAT16(9), FLOAT16(3), FLOAT16(10), FLOAT16(1), FLOAT16(3), FLOAT16(6), 
        FLOAT16(5), FLOAT16(6), FLOAT16(2), FLOAT16(8), FLOAT16(1), FLOAT16(8), FLOAT16(7), FLOAT16(9), 
        FLOAT16(2), FLOAT16(6), FLOAT16(7), FLOAT16(1), FLOAT16(7), FLOAT16(7), FLOAT16(5), FLOAT16(7), 
        FLOAT16(7), FLOAT16(0), FLOAT16(5), FLOAT16(7), FLOAT16(6), FLOAT16(10), FLOAT16(5), FLOAT16(8), 
        FLOAT16(2), FLOAT16(9), FLOAT16(10), FLOAT16(2), FLOAT16(7), FLOAT16(7), FLOAT16(1), FLOAT16(5), 
        FLOAT16(7), FLOAT16(0), FLOAT16(5), FLOAT16(10), FLOAT16(3), FLOAT16(7), FLOAT16(5), FLOAT16(7), 
        FLOAT16(4), FLOAT16(0), FLOAT16(4), FLOAT16(5), FLOAT16(7), FLOAT16(7), FLOAT16(1), FLOAT16(5), 
        FLOAT16(9), FLOAT16(0), FLOAT16(6), FLOAT16(8), FLOAT16(6), FLOAT16(5), FLOAT16(5), FLOAT16(7), 
        FLOAT16(0), FLOAT16(1), FLOAT16(7), FLOAT16(3), FLOAT16(0), FLOAT16(5), FLOAT16(8), FLOAT16(5), 
        FLOAT16(4), FLOAT16(0), FLOAT16(0), FLOAT16(5), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(3), 
        FLOAT16(4), FLOAT16(1), FLOAT16(7), FLOAT16(7), FLOAT16(1), FLOAT16(5), FLOAT16(8), FLOAT16(4), 
        FLOAT16(4), FLOAT16(3), FLOAT16(6), FLOAT16(1), FLOAT16(0), FLOAT16(8), FLOAT16(4), FLOAT16(0), 
        FLOAT16(4), FLOAT16(1), FLOAT16(7), FLOAT16(3), FLOAT16(5), FLOAT16(3), FLOAT16(8), FLOAT16(5), 
        FLOAT16(4), FLOAT16(0), FLOAT16(0), FLOAT16(5), FLOAT16(0), FLOAT16(5), FLOAT16(7), FLOAT16(0), 
        FLOAT16(0), FLOAT16(10), FLOAT16(6), FLOAT16(7), FLOAT16(1), FLOAT16(2), FLOAT16(3), FLOAT16(5), 
        FLOAT16(10), FLOAT16(8), FLOAT16(7), FLOAT16(5), FLOAT16(8), FLOAT16(1), FLOAT16(4), FLOAT16(9), 
        FLOAT16(3), FLOAT16(6), FLOAT16(5), FLOAT16(7), FLOAT16(6), FLOAT16(10), FLOAT16(1), FLOAT16(6), 
        FLOAT16(6), FLOAT16(1), FLOAT16(7), FLOAT16(4), FLOAT16(0), FLOAT16(9), FLOAT16(2), FLOAT16(8), 
        FLOAT16(3), FLOAT16(4), FLOAT16(6), FLOAT16(0), FLOAT16(9), FLOAT16(10), FLOAT16(1), FLOAT16(9), 
        FLOAT16(6), FLOAT16(8), FLOAT16(6), FLOAT16(4), FLOAT16(0), FLOAT16(9), FLOAT16(10), FLOAT16(9), 
        FLOAT16(5), FLOAT16(10), FLOAT16(0), FLOAT16(0), FLOAT16(6), FLOAT16(4), FLOAT16(2), FLOAT16(2), 
        FLOAT16(3), FLOAT16(5), FLOAT16(8), FLOAT16(1), FLOAT16(7), FLOAT16(7), FLOAT16(8), FLOAT16(10), 
        FLOAT16(1), FLOAT16(6), FLOAT16(6), FLOAT16(0), FLOAT16(6), FLOAT16(8), FLOAT16(5), FLOAT16(0), 
        FLOAT16(4), FLOAT16(1), FLOAT16(5), FLOAT16(0), FLOAT16(7), FLOAT16(7), FLOAT16(8), FLOAT16(3), 
        FLOAT16(1), FLOAT16(2), FLOAT16(6), FLOAT16(7), FLOAT16(6), FLOAT16(8), FLOAT16(5), FLOAT16(2), 
        FLOAT16(4), FLOAT16(5), FLOAT16(5), FLOAT16(0), FLOAT16(7), FLOAT16(10), FLOAT16(5), FLOAT16(3), 
        FLOAT16(0), FLOAT16(4), FLOAT16(2), FLOAT16(1), FLOAT16(4), FLOAT16(2), FLOAT16(9), FLOAT16(7), 
        FLOAT16(4), FLOAT16(10), FLOAT16(5), FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(4), FLOAT16(4), 
        FLOAT16(4), FLOAT16(3), FLOAT16(7), FLOAT16(6), FLOAT16(4), FLOAT16(2), FLOAT16(9), FLOAT16(5), 
        FLOAT16(7), FLOAT16(1), FLOAT16(5), FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(9), FLOAT16(5), 
        FLOAT16(4), FLOAT16(4), FLOAT16(5), FLOAT16(3), FLOAT16(1), FLOAT16(8), FLOAT16(9), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(5), FLOAT16(7), FLOAT16(5), FLOAT16(5), FLOAT16(0), FLOAT16(5), 
    };

    DoTest(engine,input0, input1, expected_results, tensor(2, 3, 2, 3, 2, 8), axis);
}
// 6-2
TEST(gather_elements_gpu_fp16, d222443_i222446_a5) {
    const auto& engine = get_test_engine();

    const int axis = 5;
    auto input0 = memory::allocate(engine, { data_types::f16, format::bfwzyx, { 2, 2, 2, 4, 4, 3 } }); // data
    auto input1 = memory::allocate(engine, { data_types::f16, format::bfwzyx, { 2, 2, 2, 4, 4, 6 } }); // indices

    set_values(input0, {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), 
        FLOAT16(5), FLOAT16(5), FLOAT16(2), 
        FLOAT16(0), FLOAT16(7), FLOAT16(7), 
        FLOAT16(10), FLOAT16(4), FLOAT16(5), 
        FLOAT16(9), FLOAT16(0), FLOAT16(0), 
        FLOAT16(5), FLOAT16(7), FLOAT16(0), 
        FLOAT16(4), FLOAT16(0), FLOAT16(4), 
        FLOAT16(7), FLOAT16(6), FLOAT16(10), 
        FLOAT16(9), FLOAT16(5), FLOAT16(1), 
        FLOAT16(7), FLOAT16(4), FLOAT16(7), 
        FLOAT16(10), FLOAT16(8), FLOAT16(2), 
        FLOAT16(0), FLOAT16(8), FLOAT16(3), 
        FLOAT16(6), FLOAT16(8), FLOAT16(10), 
        FLOAT16(4), FLOAT16(2), FLOAT16(10), 
        FLOAT16(7), FLOAT16(8), FLOAT16(7), 
        FLOAT16(0), FLOAT16(6), FLOAT16(9), 
        FLOAT16(2), FLOAT16(4), FLOAT16(8), 
        FLOAT16(5), FLOAT16(2), FLOAT16(3), 
        FLOAT16(3), FLOAT16(1), FLOAT16(5), 
        FLOAT16(9), FLOAT16(10), FLOAT16(0), 
        FLOAT16(9), FLOAT16(5), FLOAT16(5), 
        FLOAT16(3), FLOAT16(10), FLOAT16(5), 
        FLOAT16(2), FLOAT16(0), FLOAT16(10), 
        FLOAT16(0), FLOAT16(5), FLOAT16(4), 
        FLOAT16(3), FLOAT16(10), FLOAT16(5), 
        FLOAT16(5), FLOAT16(10), FLOAT16(0), 
        FLOAT16(8), FLOAT16(8), FLOAT16(9), 
        FLOAT16(1), FLOAT16(0), FLOAT16(7), 
        FLOAT16(9), FLOAT16(6), FLOAT16(8), 
        FLOAT16(7), FLOAT16(10), FLOAT16(9), 
        FLOAT16(2), FLOAT16(3), FLOAT16(3), 
        FLOAT16(5), FLOAT16(6), FLOAT16(9), 
        FLOAT16(4), FLOAT16(9), FLOAT16(2), 
        FLOAT16(4), FLOAT16(5), FLOAT16(5), 
        FLOAT16(3), FLOAT16(1), FLOAT16(1), 
        FLOAT16(6), FLOAT16(8), FLOAT16(0), 
        FLOAT16(5), FLOAT16(5), FLOAT16(10), 
        FLOAT16(8), FLOAT16(6), FLOAT16(9), 
        FLOAT16(6), FLOAT16(9), FLOAT16(1), 
        FLOAT16(2), FLOAT16(7), FLOAT16(1), 
        FLOAT16(1), FLOAT16(3), FLOAT16(0), 
        FLOAT16(4), FLOAT16(0), FLOAT16(7), 
        FLOAT16(10), FLOAT16(2), FLOAT16(1), 
        FLOAT16(3), FLOAT16(9), FLOAT16(7), 
        FLOAT16(1), FLOAT16(7), FLOAT16(4), 
        FLOAT16(4), FLOAT16(5), FLOAT16(1), 
        FLOAT16(6), FLOAT16(9), FLOAT16(6), 
        FLOAT16(10), FLOAT16(6), FLOAT16(1), 
        FLOAT16(10), FLOAT16(4), FLOAT16(1), 
        FLOAT16(6), FLOAT16(2), FLOAT16(5), 
        FLOAT16(5), FLOAT16(10), FLOAT16(1), 
        FLOAT16(2), FLOAT16(3), FLOAT16(6), 
        FLOAT16(1), FLOAT16(7), FLOAT16(6), 
        FLOAT16(8), FLOAT16(2), FLOAT16(5), 
        FLOAT16(4), FLOAT16(2), FLOAT16(0), 
        FLOAT16(9), FLOAT16(4), FLOAT16(1), 
        FLOAT16(10), FLOAT16(4), FLOAT16(1), 
        FLOAT16(9), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(4), FLOAT16(2), 
        FLOAT16(1), FLOAT16(8), FLOAT16(5), 
        FLOAT16(3), FLOAT16(4), FLOAT16(8), 
        FLOAT16(10), FLOAT16(7), FLOAT16(2), 
        FLOAT16(7), FLOAT16(9), FLOAT16(2), 
        FLOAT16(9), FLOAT16(5), FLOAT16(5), 
        FLOAT16(6), FLOAT16(8), FLOAT16(8), 
        FLOAT16(5), FLOAT16(10), FLOAT16(6), 
        FLOAT16(4), FLOAT16(9), FLOAT16(7), 
        FLOAT16(7), FLOAT16(10), FLOAT16(10), 
        FLOAT16(9), FLOAT16(3), FLOAT16(5), 
        FLOAT16(5), FLOAT16(1), FLOAT16(4), 
        FLOAT16(6), FLOAT16(9), FLOAT16(4), 
        FLOAT16(8), FLOAT16(9), FLOAT16(7), 
        FLOAT16(8), FLOAT16(7), FLOAT16(8), 
        FLOAT16(0), FLOAT16(9), FLOAT16(5), 
        FLOAT16(5), FLOAT16(0), FLOAT16(7), 
        FLOAT16(5), FLOAT16(7), FLOAT16(7), 
        FLOAT16(2), FLOAT16(10), FLOAT16(9), 
        FLOAT16(9), FLOAT16(5), FLOAT16(1), 
        FLOAT16(4), FLOAT16(10), FLOAT16(2), 
        FLOAT16(4), FLOAT16(3), FLOAT16(5), 
        FLOAT16(9), FLOAT16(4), FLOAT16(5), 
        FLOAT16(8), FLOAT16(4), FLOAT16(2), 
        FLOAT16(10), FLOAT16(1), FLOAT16(6), 
        FLOAT16(6), FLOAT16(0), FLOAT16(0), 
        FLOAT16(8), FLOAT16(8), FLOAT16(3), 
        FLOAT16(4), FLOAT16(7), FLOAT16(7), 
        FLOAT16(2), FLOAT16(9), FLOAT16(7), 
        FLOAT16(9), FLOAT16(1), FLOAT16(0), 
        FLOAT16(8), FLOAT16(6), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(4), 
        FLOAT16(10), FLOAT16(10), FLOAT16(4), 
        FLOAT16(2), FLOAT16(7), FLOAT16(3), 
        FLOAT16(8), FLOAT16(8), FLOAT16(4), 
        FLOAT16(3), FLOAT16(2), FLOAT16(0), 
        FLOAT16(2), FLOAT16(10), FLOAT16(2), 
        FLOAT16(9), FLOAT16(1), FLOAT16(4), 
        FLOAT16(6), FLOAT16(1), FLOAT16(9), 
        FLOAT16(1), FLOAT16(10), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(6), FLOAT16(7), FLOAT16(8), 
        FLOAT16(7), FLOAT16(8), FLOAT16(7), 
        FLOAT16(6), FLOAT16(0), FLOAT16(6), 
        FLOAT16(2), FLOAT16(3), FLOAT16(7), 
        FLOAT16(1), FLOAT16(8), FLOAT16(5), 
        FLOAT16(6), FLOAT16(6), FLOAT16(3), 
        FLOAT16(7), FLOAT16(1), FLOAT16(1), 
        FLOAT16(5), FLOAT16(9), FLOAT16(8), 
        FLOAT16(6), FLOAT16(8), FLOAT16(3), 
        FLOAT16(1), FLOAT16(5), FLOAT16(3), 
        FLOAT16(6), FLOAT16(5), FLOAT16(4), 
        FLOAT16(2), FLOAT16(4), FLOAT16(4), 
        FLOAT16(4), FLOAT16(5), FLOAT16(4), 
        FLOAT16(3), FLOAT16(0), FLOAT16(4), 
        FLOAT16(2), FLOAT16(7), FLOAT16(7), 
        FLOAT16(5), FLOAT16(8), FLOAT16(7), 
        FLOAT16(10), FLOAT16(5), FLOAT16(10), 
        FLOAT16(3), FLOAT16(5), FLOAT16(5), 
        FLOAT16(7), FLOAT16(4), FLOAT16(6), 
        FLOAT16(10), FLOAT16(1), FLOAT16(7), 
        FLOAT16(3), FLOAT16(5), FLOAT16(5), 
        FLOAT16(9), FLOAT16(0), FLOAT16(3), 
        FLOAT16(7), FLOAT16(6), FLOAT16(10), 
        FLOAT16(2), FLOAT16(10), FLOAT16(2), 
        FLOAT16(9), FLOAT16(7), FLOAT16(5), 
        FLOAT16(8), FLOAT16(0), FLOAT16(1), 
        FLOAT16(7), FLOAT16(7), FLOAT16(4), 
        FLOAT16(6), FLOAT16(8), FLOAT16(10), 
        FLOAT16(7), FLOAT16(3), FLOAT16(8), 
    });

    set_values(input1, {
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), 
        FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(0), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), 
        FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(1), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
        FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(2), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), FLOAT16(2), 
        FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(2), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(0), 
        FLOAT16(1), FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(0), 
        FLOAT16(0), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), 
        FLOAT16(1), FLOAT16(1), FLOAT16(0), FLOAT16(2), FLOAT16(1), FLOAT16(2), 
    });

    std::vector<float> expected_results = {
        FLOAT16(0), FLOAT16(1), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(0), 
        FLOAT16(5), FLOAT16(5), FLOAT16(2), FLOAT16(5), FLOAT16(5), FLOAT16(5), 
        FLOAT16(7), FLOAT16(0), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(5), FLOAT16(4), FLOAT16(5), FLOAT16(4), FLOAT16(10), FLOAT16(5), 
        FLOAT16(0), FLOAT16(9), FLOAT16(0), FLOAT16(0), FLOAT16(9), FLOAT16(9), 
        FLOAT16(7), FLOAT16(0), FLOAT16(0), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(0), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), 
        FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(7), FLOAT16(7), FLOAT16(10), 
        FLOAT16(5), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(9), 
        FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(2), FLOAT16(10), FLOAT16(8), FLOAT16(8), FLOAT16(2), FLOAT16(2), 
        FLOAT16(8), FLOAT16(8), FLOAT16(0), FLOAT16(3), FLOAT16(0), FLOAT16(0), 
        FLOAT16(6), FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(8), FLOAT16(6), 
        FLOAT16(4), FLOAT16(10), FLOAT16(2), FLOAT16(10), FLOAT16(2), FLOAT16(10), 
        FLOAT16(7), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(0), FLOAT16(6), FLOAT16(6), FLOAT16(9), FLOAT16(0), FLOAT16(0), 
        FLOAT16(8), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(4), FLOAT16(2), 
        FLOAT16(5), FLOAT16(3), FLOAT16(3), FLOAT16(5), FLOAT16(3), FLOAT16(5), 
        FLOAT16(3), FLOAT16(1), FLOAT16(1), FLOAT16(3), FLOAT16(1), FLOAT16(1), 
        FLOAT16(10), FLOAT16(9), FLOAT16(0), FLOAT16(10), FLOAT16(9), FLOAT16(0), 
        FLOAT16(9), FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), 
        FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(3), FLOAT16(5), FLOAT16(10), 
        FLOAT16(2), FLOAT16(0), FLOAT16(2), FLOAT16(0), FLOAT16(10), FLOAT16(10), 
        FLOAT16(0), FLOAT16(5), FLOAT16(4), FLOAT16(4), FLOAT16(5), FLOAT16(0), 
        FLOAT16(10), FLOAT16(3), FLOAT16(5), FLOAT16(5), FLOAT16(10), FLOAT16(10), 
        FLOAT16(10), FLOAT16(5), FLOAT16(10), FLOAT16(0), FLOAT16(10), FLOAT16(10), 
        FLOAT16(8), FLOAT16(9), FLOAT16(8), FLOAT16(9), FLOAT16(8), FLOAT16(9), 
        FLOAT16(7), FLOAT16(0), FLOAT16(0), FLOAT16(7), FLOAT16(0), FLOAT16(0), 
        FLOAT16(8), FLOAT16(9), FLOAT16(6), FLOAT16(8), FLOAT16(8), FLOAT16(6), 
        FLOAT16(9), FLOAT16(9), FLOAT16(7), FLOAT16(10), FLOAT16(10), FLOAT16(10), 
        FLOAT16(2), FLOAT16(2), FLOAT16(3), FLOAT16(3), FLOAT16(2), FLOAT16(3), 
        FLOAT16(6), FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(6), FLOAT16(5), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(9), FLOAT16(4), FLOAT16(4), 
        FLOAT16(5), FLOAT16(5), FLOAT16(4), FLOAT16(4), FLOAT16(5), FLOAT16(5), 
        FLOAT16(3), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(8), FLOAT16(8), FLOAT16(6), FLOAT16(6), FLOAT16(0), 
        FLOAT16(10), FLOAT16(10), FLOAT16(5), FLOAT16(10), FLOAT16(5), FLOAT16(5), 
        FLOAT16(6), FLOAT16(8), FLOAT16(9), FLOAT16(9), FLOAT16(8), FLOAT16(9), 
        FLOAT16(9), FLOAT16(6), FLOAT16(6), FLOAT16(1), FLOAT16(9), FLOAT16(1), 
        FLOAT16(2), FLOAT16(1), FLOAT16(2), FLOAT16(1), FLOAT16(7), FLOAT16(2), 
        FLOAT16(1), FLOAT16(1), FLOAT16(3), FLOAT16(1), FLOAT16(1), FLOAT16(1), 
        FLOAT16(0), FLOAT16(4), FLOAT16(4), FLOAT16(7), FLOAT16(4), FLOAT16(0), 
        FLOAT16(10), FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(10), FLOAT16(10), 
        FLOAT16(3), FLOAT16(3), FLOAT16(3), FLOAT16(9), FLOAT16(9), FLOAT16(7), 
        FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(1), FLOAT16(4), FLOAT16(4), 
        FLOAT16(4), FLOAT16(4), FLOAT16(1), FLOAT16(1), FLOAT16(5), FLOAT16(5), 
        FLOAT16(9), FLOAT16(6), FLOAT16(6), FLOAT16(6), FLOAT16(9), FLOAT16(9), 
        FLOAT16(6), FLOAT16(10), FLOAT16(6), FLOAT16(10), FLOAT16(10), FLOAT16(10), 
        FLOAT16(1), FLOAT16(10), FLOAT16(1), FLOAT16(10), FLOAT16(1), FLOAT16(10), 
        FLOAT16(2), FLOAT16(5), FLOAT16(6), FLOAT16(2), FLOAT16(2), FLOAT16(6), 
        FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(1), FLOAT16(10), FLOAT16(10), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(6), 
        FLOAT16(1), FLOAT16(1), FLOAT16(6), FLOAT16(7), FLOAT16(7), FLOAT16(6), 
        FLOAT16(8), FLOAT16(5), FLOAT16(5), FLOAT16(8), FLOAT16(8), FLOAT16(2), 
        FLOAT16(4), FLOAT16(2), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(4), 
        FLOAT16(1), FLOAT16(9), FLOAT16(4), FLOAT16(9), FLOAT16(9), FLOAT16(4), 
        FLOAT16(1), FLOAT16(4), FLOAT16(1), FLOAT16(4), FLOAT16(4), FLOAT16(10), 
        FLOAT16(1), FLOAT16(1), FLOAT16(9), FLOAT16(1), FLOAT16(9), FLOAT16(1), 
        FLOAT16(4), FLOAT16(4), FLOAT16(0), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(8), FLOAT16(1), FLOAT16(1), FLOAT16(1), FLOAT16(5), FLOAT16(8), 
        FLOAT16(3), FLOAT16(4), FLOAT16(3), FLOAT16(3), FLOAT16(3), FLOAT16(8), 
        FLOAT16(10), FLOAT16(10), FLOAT16(7), FLOAT16(10), FLOAT16(10), FLOAT16(2), 
        FLOAT16(7), FLOAT16(7), FLOAT16(2), FLOAT16(9), FLOAT16(9), FLOAT16(9), 
        FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(9), FLOAT16(9), FLOAT16(9), 
        FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(8), 
        FLOAT16(5), FLOAT16(6), FLOAT16(6), FLOAT16(5), FLOAT16(10), FLOAT16(5), 
        FLOAT16(7), FLOAT16(9), FLOAT16(7), FLOAT16(7), FLOAT16(9), FLOAT16(7), 
        FLOAT16(10), FLOAT16(10), FLOAT16(7), FLOAT16(10), FLOAT16(7), FLOAT16(10), 
        FLOAT16(5), FLOAT16(3), FLOAT16(9), FLOAT16(3), FLOAT16(9), FLOAT16(3), 
        FLOAT16(5), FLOAT16(1), FLOAT16(1), FLOAT16(4), FLOAT16(4), FLOAT16(4), 
        FLOAT16(9), FLOAT16(9), FLOAT16(9), FLOAT16(4), FLOAT16(6), FLOAT16(6), 
        FLOAT16(9), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(7), FLOAT16(9), 
        FLOAT16(8), FLOAT16(8), FLOAT16(7), FLOAT16(8), FLOAT16(8), FLOAT16(8), 
        FLOAT16(9), FLOAT16(0), FLOAT16(9), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(0), FLOAT16(5), FLOAT16(7), FLOAT16(7), FLOAT16(0), FLOAT16(0), 
        FLOAT16(5), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(2), FLOAT16(9), FLOAT16(2), FLOAT16(9), FLOAT16(9), FLOAT16(10), 
        FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(1), FLOAT16(5), FLOAT16(9), 
        FLOAT16(4), FLOAT16(10), FLOAT16(2), FLOAT16(10), FLOAT16(4), FLOAT16(4), 
        FLOAT16(5), FLOAT16(3), FLOAT16(4), FLOAT16(3), FLOAT16(4), FLOAT16(5), 
        FLOAT16(5), FLOAT16(9), FLOAT16(9), FLOAT16(5), FLOAT16(5), FLOAT16(4), 
        FLOAT16(4), FLOAT16(8), FLOAT16(8), FLOAT16(2), FLOAT16(4), FLOAT16(4), 
        FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(1), FLOAT16(10), FLOAT16(6), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(6), FLOAT16(0), FLOAT16(0), 
        FLOAT16(3), FLOAT16(8), FLOAT16(8), FLOAT16(3), FLOAT16(8), FLOAT16(8), 
        FLOAT16(4), FLOAT16(7), FLOAT16(4), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(9), FLOAT16(2), FLOAT16(7), FLOAT16(9), FLOAT16(7), FLOAT16(7), 
        FLOAT16(9), FLOAT16(0), FLOAT16(9), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(2), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(2), 
        FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(0), FLOAT16(2), FLOAT16(0), 
        FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(10), 
        FLOAT16(7), FLOAT16(7), FLOAT16(2), FLOAT16(3), FLOAT16(7), FLOAT16(3), 
        FLOAT16(4), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(8), FLOAT16(8), 
        FLOAT16(3), FLOAT16(0), FLOAT16(3), FLOAT16(0), FLOAT16(0), FLOAT16(0), 
        FLOAT16(2), FLOAT16(10), FLOAT16(10), FLOAT16(2), FLOAT16(2), FLOAT16(2), 
        FLOAT16(9), FLOAT16(4), FLOAT16(1), FLOAT16(1), FLOAT16(4), FLOAT16(4), 
        FLOAT16(6), FLOAT16(1), FLOAT16(6), FLOAT16(9), FLOAT16(6), FLOAT16(1), 
        FLOAT16(10), FLOAT16(2), FLOAT16(1), FLOAT16(10), FLOAT16(1), FLOAT16(10), 
        FLOAT16(2), FLOAT16(1), FLOAT16(1), FLOAT16(2), FLOAT16(2), FLOAT16(1), 
        FLOAT16(8), FLOAT16(6), FLOAT16(6), FLOAT16(8), FLOAT16(6), FLOAT16(6), 
        FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(0), FLOAT16(0), FLOAT16(6), FLOAT16(6), FLOAT16(0), FLOAT16(0), 
        FLOAT16(7), FLOAT16(3), FLOAT16(3), FLOAT16(2), FLOAT16(7), FLOAT16(3), 
        FLOAT16(5), FLOAT16(1), FLOAT16(1), FLOAT16(5), FLOAT16(8), FLOAT16(5), 
        FLOAT16(6), FLOAT16(6), FLOAT16(6), FLOAT16(6), FLOAT16(6), FLOAT16(6), 
        FLOAT16(1), FLOAT16(1), FLOAT16(7), FLOAT16(1), FLOAT16(7), FLOAT16(7), 
        FLOAT16(9), FLOAT16(5), FLOAT16(8), FLOAT16(8), FLOAT16(5), FLOAT16(9), 
        FLOAT16(6), FLOAT16(8), FLOAT16(8), FLOAT16(6), FLOAT16(6), FLOAT16(6), 
        FLOAT16(3), FLOAT16(5), FLOAT16(3), FLOAT16(5), FLOAT16(1), FLOAT16(1), 
        FLOAT16(6), FLOAT16(5), FLOAT16(4), FLOAT16(5), FLOAT16(6), FLOAT16(5), 
        FLOAT16(4), FLOAT16(2), FLOAT16(4), FLOAT16(4), FLOAT16(2), FLOAT16(2), 
        FLOAT16(4), FLOAT16(5), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), 
        FLOAT16(3), FLOAT16(3), FLOAT16(0), FLOAT16(4), FLOAT16(3), FLOAT16(4), 
        FLOAT16(7), FLOAT16(7), FLOAT16(2), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(5), FLOAT16(7), FLOAT16(8), FLOAT16(7), FLOAT16(5), FLOAT16(5), 
        FLOAT16(10), FLOAT16(5), FLOAT16(10), FLOAT16(10), FLOAT16(10), FLOAT16(5), 
        FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(3), FLOAT16(5), FLOAT16(5), 
        FLOAT16(6), FLOAT16(6), FLOAT16(7), FLOAT16(7), FLOAT16(7), FLOAT16(7), 
        FLOAT16(10), FLOAT16(1), FLOAT16(7), FLOAT16(1), FLOAT16(7), FLOAT16(7), 
        FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(5), FLOAT16(3), FLOAT16(5), 
        FLOAT16(0), FLOAT16(9), FLOAT16(3), FLOAT16(9), FLOAT16(0), FLOAT16(3), 
        FLOAT16(6), FLOAT16(6), FLOAT16(6), FLOAT16(10), FLOAT16(10), FLOAT16(6), 
        FLOAT16(2), FLOAT16(2), FLOAT16(2), FLOAT16(10), FLOAT16(10), FLOAT16(10), 
        FLOAT16(5), FLOAT16(9), FLOAT16(7), FLOAT16(7), FLOAT16(5), FLOAT16(9), 
        FLOAT16(0), FLOAT16(8), FLOAT16(0), FLOAT16(1), FLOAT16(1), FLOAT16(8), 
        FLOAT16(7), FLOAT16(7), FLOAT16(4), FLOAT16(4), FLOAT16(4), FLOAT16(4), 
        FLOAT16(8), FLOAT16(10), FLOAT16(8), FLOAT16(6), FLOAT16(10), FLOAT16(8), 
        FLOAT16(3), FLOAT16(3), FLOAT16(7), FLOAT16(8), FLOAT16(3), FLOAT16(8), 
    };

    DoTest(engine,input0, input1, expected_results, tensor(2, 2, 2, 4, 4, 6), axis);
}

// TEST(gather_elements_gpu_fp16, d32223_i32228_a4) {
//     const auto& engine = get_test_engine();

//     const int axis = ;
//     auto input0 = memory::allocate(engine, { data_types::f16, format::bfyx,  }); // data
//     auto input1 = memory::allocate(engine, { data_types::f16, format::bfyx,  }); // indices

//     set_values(input0, {
//     });

//     set_values(input1, {
//     });

//     std::vector<float> expected_results = {
//     };

//     DoTest(engine,input0, input1, expected_results, axis);
// }

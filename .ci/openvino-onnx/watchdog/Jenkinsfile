// Copyright (C) 2018-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

pipeline {
    agent {
        label "${LABEL}"
    }
    environment {
        BUILD_WORKSPACE = "$WORKSPACE/$BUILD_NUMBER"
        WATCHDOG_ROOT = "$BUILD_WORKSPACE/.ci/openvino-onnx/watchdog"
        VENV_PATH = "${BUILD_WORKSPACE}/.wdvenv"
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage("Clone repository") {
        steps{
                dir ("$BUILD_WORKSPACE") {
                    checkout([$class: 'GitSCM', branches: [[name: "*/$BRANCH"]],
                        doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', timeout: 30]],  submoduleCfg: [],
                        userRemoteConfigs: [[url: "${OPEN_VINO_URL}"]]])
                }
            }
        }
        stage("Prepare environment") {
            steps{
                dir ("$BUILD_WORKSPACE") {
                    sh """#!/bin/bash
                        if [ ! -d ${VENV_PATH} ]; then
                            python3 -m venv ${VENV_PATH}
                            source ${VENV_PATH}/bin/activate
                            pip install -r ${WATCHDOG_ROOT}/requirements.txt
                        fi
                    """
                }
            }
        }
        stage("Run script") {
            steps{
                dir ("$BUILD_WORKSPACE") {
                    withCredentials([string(credentialsId: 'onnx-watchdog-agent-github-token', variable: 'GITHUB_CREDENTIALS'),
                                     string(credentialsId: 'jenkins_watchdog_token', variable: 'JENKINS_TOKEN')]) {
                        sh """#!/bin/bash
                            source ${VENV_PATH}/bin/activate
                            export PYTHONHTTPSVERIFY=0
                            python ${WATCHDOG_ROOT}/src/main.py \
                                --msteams-url=${MSTEAMS_URL_FILE} \
                                --github-credentials=${GITHUB_CREDENTIALS} \
                                --github-org=${GITHUB_ORG} \
                                --github-project=${GITHUB_PROJECT} \
                                --jenkins-token=${JENKINS_TOKEN_FILE} \
                                --jenkins-server=${JENKINS_SERVER} \
                                --jenkins-user=${JENKINS_USER} \
                                --ci-job=${CI_JOB_NAME} \
                                --watchdog-job=${WATCHDOG_JOB_NAME} \
                                --jenkins-watchdog-token=${JENKINS_TOKEN} \
                                --jenkins-watchdog-user=${JENKINS_WATCHDOG_USER} \
                                --jenkins-watchdog-server=${JENKINS_WATCHDOG_SERVER}
                        """
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                currentBuild.result = "FAILURE"
            }
        }
        cleanup {
            sh """
                cd $BUILD_WORKSPACE
            """
        }
    }
}
